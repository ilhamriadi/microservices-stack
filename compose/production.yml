version: '3.8'

# Production environment overrides
services:
  # Nginx with SSL and performance optimizations
  nginx:
    volumes:
      - ./shared/nginx/ssl:/etc/nginx/ssl:ro
      - ./shared/nginx/logs:/var/log/nginx
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Laravel Auth - Production optimizations
  laravel-auth:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=error
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - ./shared/storage/auth:/var/www/html/storage/app:rw
      - auth_logs:/var/www/html/storage/logs

  # Laravel Catalog - Production optimizations
  laravel-catalog:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=error
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - ./shared/storage/catalog:/var/www/html/storage/app:rw
      - catalog_logs:/var/www/html/storage/logs

  # Express API - Production optimizations
  express-api:
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - ./shared/storage/express:/app/uploads:rw
      - express_logs:/app/logs

  # Frontend - Production build
  frontend:
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # MySQL with performance tuning
  mysql:
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - mysql_data:/var/lib/mysql:rw
      - mysql_logs:/var/log/mysql:rw
      - ./shared/database/my.cnf:/etc/mysql/conf.d/custom.cnf:ro

  # Redis with persistence
  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    volumes:
      - redis_data:/data:rw

  # Log aggregation service
  fluentd:
    image: fluentd:latest
    volumes:
      - ./shared/fluentd/conf:/fluentd/etc:ro
      - auth_logs:/var/log/auth:ro
      - catalog_logs:/var/log/catalog:ro
      - express_logs:/var/log/express:ro
      - mysql_logs:/var/log/mysql:ro
      - ./shared/nginx/logs:/var/log/nginx:ro
    networks:
      - microservices
    restart: unless-stopped

  # Backup service
  backup:
    image: alpine:latest
    command: >
      sh -c "
        apk add --no-cache mysql-client &&
        while true; do
          mysqldump -h mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} --all-databases > /backup/backup_$(date +%Y%m%d_%H%M%S).sql &&
          find /backup -name '*.sql' -mtime +7 -delete &&
          sleep 86400
        done
      "
    volumes:
      - ./shared/backup:/backup:rw
    depends_on:
      - mysql
    networks:
      - microservices
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  mysql_logs:
    driver: local
  redis_data:
    driver: local
  auth_logs:
    driver: local
  catalog_logs:
    driver: local
  express_logs:
    driver: local
